/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.80
 * Generated at: 2023-10-27 12:39:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class admin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/javax.servlet.jsp.jstl-1.2.1.jar", Long.valueOf(1698077744610L));
    _jspx_dependants.put("jar:file:/D:/Aurionpro/J2EE/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/08-bank-mvc/WEB-INF/lib/javax.servlet.jsp.jstl-1.2.1.jar!/META-INF/c.tld", Long.valueOf(1323238578000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>Admin Dashboard</title>\r\n");
      out.write("<style>\r\n");
      out.write("/* Define your CSS styles here */\r\n");
      out.write("body {\r\n");
      out.write("	font-family: Arial, sans-serif;\r\n");
      out.write("	background-color: #f2f2f2;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".container {\r\n");
      out.write("	max-width: 800px;\r\n");
      out.write("	margin: 0 auto;\r\n");
      out.write("	padding: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".dashboard-container {\r\n");
      out.write("	background-color: #fff;\r\n");
      out.write("	padding: 20px;\r\n");
      out.write("	border-radius: 5px;\r\n");
      out.write("	box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".dashboard-heading {\r\n");
      out.write("	font-size: 24px;\r\n");
      out.write("	color: #333;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".button-container {\r\n");
      out.write("	margin-top: 20px;\r\n");
      out.write("	display: flex;\r\n");
      out.write("	justify-content: space-between;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".button-container button {\r\n");
      out.write("	padding: 10px 20px;\r\n");
      out.write("	background-color: #007bff;\r\n");
      out.write("	color: #fff;\r\n");
      out.write("	border: none;\r\n");
      out.write("	border-radius: 5px;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".button-container button:hover {\r\n");
      out.write("	background-color: #0056b3;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".registration-form {\r\n");
      out.write("	margin-top: 20px;\r\n");
      out.write("	padding: 20px;\r\n");
      out.write("	background-color: #f9f9f9;\r\n");
      out.write("	border: 1px solid #ddd;\r\n");
      out.write("	border-radius: 5px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".registration-form h2 {\r\n");
      out.write("	font-size: 20px;\r\n");
      out.write("	color: #333;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".registration-form input {\r\n");
      out.write("	width: 100%;\r\n");
      out.write("	padding: 10px;\r\n");
      out.write("	margin: 5px 0;\r\n");
      out.write("	border: 1px solid #ccc;\r\n");
      out.write("	border-radius: 5px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".registration-form button {\r\n");
      out.write("	padding: 10px 20px;\r\n");
      out.write("	background-color: #007bff;\r\n");
      out.write("	color: #fff;\r\n");
      out.write("	border: none;\r\n");
      out.write("	border-radius: 5px;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".registration-form button:hover {\r\n");
      out.write("	background-color: #0056b3;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".logout-button {\r\n");
      out.write("	margin-top: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".logout-button button {\r\n");
      out.write("	padding: 10px 20px;\r\n");
      out.write("	background-color: #e74c3c;\r\n");
      out.write("	color: #fff;\r\n");
      out.write("	border: none;\r\n");
      out.write("	border-radius: 5px;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".logout-button button:hover {\r\n");
      out.write("	background-color: #c04132;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("		<div class=\"dashboard-container\">\r\n");
      out.write("			<h1 class=\"dashboard-heading\">Welcome to the Admin Dashboard</h1>\r\n");
      out.write("			<div class=\"button-container\">\r\n");
      out.write("				<!-- Buttons for viewing users and transactions -->\r\n");
      out.write("				<form action=\"AdminController\" method=\"get\">\r\n");
      out.write("					<button type=\"submit\" name=\"action\" value=\"viewUsers\">View\r\n");
      out.write("						Users</button>\r\n");
      out.write("					<button type=\"submit\" name=\"action\" value=\"showTransaction\">View\r\n");
      out.write("						Transactions</button>\r\n");
      out.write("				</form>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"registration-form\">\r\n");
      out.write("				<h2>Create User Account</h2>\r\n");
      out.write("				<form action=\"AdminController\" method=\"post\"\r\n");
      out.write("					onsubmit=\"return validateForm()\">\r\n");
      out.write("					<input type=\"text\" name=\"fname\" placeholder=\"First Name\" required><br>\r\n");
      out.write("					<input type=\"text\" name=\"lname\" placeholder=\"Last Name\" required><br>\r\n");
      out.write("					<input type=\"text\" name=\"username\" placeholder=\"Username\" required><br>\r\n");
      out.write("					<input type=\"text\" name=\"email\" id=\"email\"\r\n");
      out.write("						placeholder=\"Email (Gmail)\" required><br> <input\r\n");
      out.write("						type=\"password\" name=\"password\" id=\"password\"\r\n");
      out.write("						placeholder=\"Password\" required><br>\r\n");
      out.write("					<button type=\"submit\" name=\"action\" value=\"createUser\">Create\r\n");
      out.write("						User</button>\r\n");
      out.write("				</form>\r\n");
      out.write("\r\n");
      out.write("				<script>\r\n");
      out.write("					function validateForm() {\r\n");
      out.write("						var emailInput = document.getElementById(\"email\").value;\r\n");
      out.write("						var passwordInput = document.getElementById(\"password\").value;\r\n");
      out.write("						var emailPattern = /^[A-Za-z0-9._%+-]+@gmail.com$/; // Gmail pattern\r\n");
      out.write("						var passwordPattern = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$/; // Password pattern (at least 8 characters with a mix of upper and lower case letters and digits)\r\n");
      out.write("\r\n");
      out.write("						if (!emailPattern.test(emailInput)) {\r\n");
      out.write("							alert(\"Please enter a valid Gmail address.\");\r\n");
      out.write("							return false;\r\n");
      out.write("						}\r\n");
      out.write("\r\n");
      out.write("						if (!passwordPattern.test(passwordInput)) {\r\n");
      out.write("							alert(\"Password must be at least 8 characters long and contain a mix of upper and lower case letters and digits.\");\r\n");
      out.write("							return false;\r\n");
      out.write("						}\r\n");
      out.write("\r\n");
      out.write("						return true; // Form will be submitted if both validations pass\r\n");
      out.write("					}\r\n");
      out.write("				</script>\r\n");
      out.write("\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	<!-- Include your logout form -->\r\n");
      out.write("	<form action=\"AdminController\" method=\"post\" class=\"logout-button\">\r\n");
      out.write("		<button type=\"submit\" name=\"action\" value=\"logout\">Logout</button>\r\n");
      out.write("	</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
